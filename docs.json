[{"name":"Triplet","comment":" 3-tuple functions aligned with elm/core 2-tuple ones.\n\n\n# Create\n\n@docs triplet\n\n\n# Access\n\n@docs first, second, third\n\n\n# Map\n\n@docs mapFirst, mapSecond, mapThird, mapAll\n\n\n# Apply\n\n@docs applyTo\n\n","unions":[],"aliases":[],"values":[{"name":"applyTo","comment":" Apply the triplet parts to a function.\n\n    type alias Person =\n        { name : String\n        , age : Int\n        , alive : Bool\n        }\n\n    applyTo Person (\"Mahatma Gandhi\", 78, False) == { name = \"Mahatma Gandhi\", age = 78, alive = False }\n\n","type":"(a -> b -> c -> t) -> ( a, b, c ) -> t"},{"name":"first","comment":" Extract the first value from a triplet.\n\n    first ( 3, 4, 5 ) == 3\n\n    first ( \"john\", \"doe\", \"mary\" ) == \"john\"\n\n","type":"( a, b, c ) -> a"},{"name":"mapAll","comment":" Transform all parts of a triplet.\n\n    import String\n\n    mapAll String.reverse sqrt not (\"stressed\", 16, True) == (\"desserts\", 4, False)\n\n","type":"(a -> x) -> (b -> y) -> (c -> z) -> ( a, b, c ) -> ( x, y, z )"},{"name":"mapFirst","comment":" Transform the first value in a triplet.\n\n    import String\n\n    mapFirst String.reverse (\"stressed\", 16, True) == (\"desserts\", 16, True)\n    mapFirst String.length  (\"stressed\", 16, True) == (8, 16, True)\n\n","type":"(a -> x) -> ( a, b, c ) -> ( x, b, c )"},{"name":"mapSecond","comment":" Transform the second value in a triplet.\n\n    mapSecond sqrt ( \"stressed\", 16, True ) == ( \"stressed\", 4, True )\n\n    mapSecond negate ( \"stressed\", 16, True ) == ( \"stressed\", -16, True )\n\n","type":"(b -> y) -> ( a, b, c ) -> ( a, y, c )"},{"name":"mapThird","comment":" Transform the third value in a triplet.\n\n    mapThird not ( \"stressed\", 16, True ) == ( \"stressed\", 16, False )\n\n","type":"(c -> z) -> ( a, b, c ) -> ( a, b, z )"},{"name":"second","comment":" Extract the second value from a triplet.\n\n    second ( 3, 4, 5 ) == 4\n\n    second ( \"john\", \"doe\", \"mary\" ) == \"doe\"\n\n","type":"( a, b, c ) -> b"},{"name":"third","comment":" Extract the third value from a triplet.\n\n    third ( 3, 4, 5 ) == 5\n\n    third ( \"john\", \"doe\", \"mary\" ) == \"mary\"\n\n","type":"( a, b, c ) -> c"},{"name":"triplet","comment":" Create a 3-tuple.\n\n    -- triplet 3 4 5 == (3, 4, 5)\n    zip : List a -> List b -> List c -> List ( a, b, c )\n    zip xs ys zs =\n        List.map3 Triplet.triplet xs ys\n\n","type":"a -> b -> c -> ( a, b, c )"}],"binops":[]}]